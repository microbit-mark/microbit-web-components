import{a as t}from"./chunk-3d8ed500.js";class s{constructor(){this.services=void 0,this.idTemplate="microbit-matrix-${row}-${column}",this.offClass="microbit-matrix-off",this.onClass="microbit-matrix-on"}async watchHandler(){const t=[[],[],[],[],[]];for(let s=0;s<5;s++)for(let e=0;e<5;e++){const i=this.idTemplate.replace("${row}",s.toString()).replace("${column}",e.toString()),a=document.getElementById(i);a&&(t[s][e]=a,a.onclick=(()=>this.toggle(s,e)),a.classList.toggle(this.onClass,!1),a.classList.toggle(this.offClass,!1))}this.elements=t,this.services&&this.services.ledService&&(this.matrix=await this.services.ledService.getMatrixState(),await this.updateMatrix())}async toggle(t,s){this.matrix[t][s]=!this.matrix[t][s],await this.services.ledService.setMatrixState(this.matrix),await this.updateMatrix()}async updateMatrix(){this.matrix.forEach((t,s)=>{t.forEach((t,e)=>{const i=this.elements[s][e];i&&(i.classList.toggle(this.onClass,t),i.classList.toggle(this.offClass,!t))})})}static get is(){return"microbit-matrix"}static get properties(){return{el:{elementRef:!0},idTemplate:{type:String,attr:"id-template"},offClass:{type:String,attr:"off-class"},onClass:{type:String,attr:"on-class"},services:{type:"Any",attr:"services",watchCallbacks:["watchHandler"]}}}}t.injectProps(s,["services"]);export{s as MicrobitMatrix};