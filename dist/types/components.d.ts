/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import './stencil.core';

import '@stencil/state-tunnel';
import {
  Services,
} from 'microbit-web-bluetooth';
import {
  DeviceInformation,
} from 'microbit-web-bluetooth/types/services/device-information';


export namespace Components {

  interface MicrobitTemperature {
    /**
    * The text shown when disconnected
    */
    'disconnectedText': string;
    /**
    * The text shown when no temperature
    */
    'noTemperature': string;
    'services': Services;
    /**
    * The interval to check the temperature (ms)
    */
    'temperaturePeriod': number;
  }
  interface MicrobitTemperatureAttributes extends StencilHTMLAttributes {
    /**
    * The text shown when disconnected
    */
    'disconnectedText'?: string;
    /**
    * The text shown when no temperature
    */
    'noTemperature'?: string;
    'services'?: Services;
    /**
    * The interval to check the temperature (ms)
    */
    'temperaturePeriod'?: number;
  }

  interface MicrobitFirmware {
    'deviceInformation': DeviceInformation;
    /**
    * The text shown when disconnected
    */
    'disconnectedText': string;
    /**
    * The text shown when no firmware version
    */
    'noInfo': string;
  }
  interface MicrobitFirmwareAttributes extends StencilHTMLAttributes {
    'deviceInformation'?: DeviceInformation;
    /**
    * The text shown when disconnected
    */
    'disconnectedText'?: string;
    /**
    * The text shown when no firmware version
    */
    'noInfo'?: string;
  }

  interface MicrobitHardware {
    'deviceInformation': DeviceInformation;
    /**
    * The text shown when disconnected
    */
    'disconnectedText': string;
    /**
    * The text shown when no hardware version
    */
    'noInfo': string;
  }
  interface MicrobitHardwareAttributes extends StencilHTMLAttributes {
    'deviceInformation'?: DeviceInformation;
    /**
    * The text shown when disconnected
    */
    'disconnectedText'?: string;
    /**
    * The text shown when no hardware version
    */
    'noInfo'?: string;
  }

  interface MicrobitManufacturer {
    'deviceInformation': DeviceInformation;
    /**
    * The text shown when disconnected
    */
    'disconnectedText': string;
    /**
    * The text shown when no manufacturer name
    */
    'noInfo': string;
  }
  interface MicrobitManufacturerAttributes extends StencilHTMLAttributes {
    'deviceInformation'?: DeviceInformation;
    /**
    * The text shown when disconnected
    */
    'disconnectedText'?: string;
    /**
    * The text shown when no manufacturer name
    */
    'noInfo'?: string;
  }

  interface MicrobitModel {
    'deviceInformation': DeviceInformation;
    /**
    * The text shown when disconnected
    */
    'disconnectedText': string;
    /**
    * The text shown when no model number
    */
    'noInfo': string;
  }
  interface MicrobitModelAttributes extends StencilHTMLAttributes {
    'deviceInformation'?: DeviceInformation;
    /**
    * The text shown when disconnected
    */
    'disconnectedText'?: string;
    /**
    * The text shown when no model number
    */
    'noInfo'?: string;
  }

  interface MicrobitName {
    'device': BluetoothDevice;
    /**
    * The text shown when disconnected
    */
    'disconnectedText': string;
  }
  interface MicrobitNameAttributes extends StencilHTMLAttributes {
    'device'?: BluetoothDevice;
    /**
    * The text shown when disconnected
    */
    'disconnectedText'?: string;
  }

  interface MicrobitSerial {
    'deviceInformation': DeviceInformation;
    /**
    * The text shown when disconnected
    */
    'disconnectedText': string;
    /**
    * The text shown when no serial number
    */
    'noInfo': string;
  }
  interface MicrobitSerialAttributes extends StencilHTMLAttributes {
    'deviceInformation'?: DeviceInformation;
    /**
    * The text shown when disconnected
    */
    'disconnectedText'?: string;
    /**
    * The text shown when no serial number
    */
    'noInfo'?: string;
  }

  interface MicrobitText {
    /**
    * The text shown on the button
    */
    'buttonLabel': string;
    /**
    * The speed to scroll the text
    */
    'scrollDelay': number;
    'services': Services;
  }
  interface MicrobitTextAttributes extends StencilHTMLAttributes {
    /**
    * The text shown on the button
    */
    'buttonLabel'?: string;
    /**
    * The speed to scroll the text
    */
    'scrollDelay'?: number;
    'services'?: Services;
  }

  interface MicrobitApp {}
  interface MicrobitAppAttributes extends StencilHTMLAttributes {}

  interface MicrobitConnect {
    /**
    * The button label to connect
    */
    'connectLabel': string;
    'device': BluetoothDevice;
    /**
    * The button label to disconnect
    */
    'disconnectLabel': string;
    'setDevice': (device: BluetoothDevice) => void;
    'setDeviceInformation': (deviceInformation: DeviceInformation) => void;
    'setServices': (services: Services) => void;
  }
  interface MicrobitConnectAttributes extends StencilHTMLAttributes {
    /**
    * The button label to connect
    */
    'connectLabel'?: string;
    'device'?: BluetoothDevice;
    /**
    * The button label to disconnect
    */
    'disconnectLabel'?: string;
    'setDevice'?: (device: BluetoothDevice) => void;
    'setDeviceInformation'?: (deviceInformation: DeviceInformation) => void;
    'setServices'?: (services: Services) => void;
  }
}

declare global {
  interface StencilElementInterfaces {
    'MicrobitTemperature': Components.MicrobitTemperature;
    'MicrobitFirmware': Components.MicrobitFirmware;
    'MicrobitHardware': Components.MicrobitHardware;
    'MicrobitManufacturer': Components.MicrobitManufacturer;
    'MicrobitModel': Components.MicrobitModel;
    'MicrobitName': Components.MicrobitName;
    'MicrobitSerial': Components.MicrobitSerial;
    'MicrobitText': Components.MicrobitText;
    'MicrobitApp': Components.MicrobitApp;
    'MicrobitConnect': Components.MicrobitConnect;
  }

  interface StencilIntrinsicElements {
    'microbit-temperature': Components.MicrobitTemperatureAttributes;
    'microbit-firmware': Components.MicrobitFirmwareAttributes;
    'microbit-hardware': Components.MicrobitHardwareAttributes;
    'microbit-manufacturer': Components.MicrobitManufacturerAttributes;
    'microbit-model': Components.MicrobitModelAttributes;
    'microbit-name': Components.MicrobitNameAttributes;
    'microbit-serial': Components.MicrobitSerialAttributes;
    'microbit-text': Components.MicrobitTextAttributes;
    'microbit-app': Components.MicrobitAppAttributes;
    'microbit-connect': Components.MicrobitConnectAttributes;
  }


  interface HTMLMicrobitTemperatureElement extends Components.MicrobitTemperature, HTMLStencilElement {}
  var HTMLMicrobitTemperatureElement: {
    prototype: HTMLMicrobitTemperatureElement;
    new (): HTMLMicrobitTemperatureElement;
  };

  interface HTMLMicrobitFirmwareElement extends Components.MicrobitFirmware, HTMLStencilElement {}
  var HTMLMicrobitFirmwareElement: {
    prototype: HTMLMicrobitFirmwareElement;
    new (): HTMLMicrobitFirmwareElement;
  };

  interface HTMLMicrobitHardwareElement extends Components.MicrobitHardware, HTMLStencilElement {}
  var HTMLMicrobitHardwareElement: {
    prototype: HTMLMicrobitHardwareElement;
    new (): HTMLMicrobitHardwareElement;
  };

  interface HTMLMicrobitManufacturerElement extends Components.MicrobitManufacturer, HTMLStencilElement {}
  var HTMLMicrobitManufacturerElement: {
    prototype: HTMLMicrobitManufacturerElement;
    new (): HTMLMicrobitManufacturerElement;
  };

  interface HTMLMicrobitModelElement extends Components.MicrobitModel, HTMLStencilElement {}
  var HTMLMicrobitModelElement: {
    prototype: HTMLMicrobitModelElement;
    new (): HTMLMicrobitModelElement;
  };

  interface HTMLMicrobitNameElement extends Components.MicrobitName, HTMLStencilElement {}
  var HTMLMicrobitNameElement: {
    prototype: HTMLMicrobitNameElement;
    new (): HTMLMicrobitNameElement;
  };

  interface HTMLMicrobitSerialElement extends Components.MicrobitSerial, HTMLStencilElement {}
  var HTMLMicrobitSerialElement: {
    prototype: HTMLMicrobitSerialElement;
    new (): HTMLMicrobitSerialElement;
  };

  interface HTMLMicrobitTextElement extends Components.MicrobitText, HTMLStencilElement {}
  var HTMLMicrobitTextElement: {
    prototype: HTMLMicrobitTextElement;
    new (): HTMLMicrobitTextElement;
  };

  interface HTMLMicrobitAppElement extends Components.MicrobitApp, HTMLStencilElement {}
  var HTMLMicrobitAppElement: {
    prototype: HTMLMicrobitAppElement;
    new (): HTMLMicrobitAppElement;
  };

  interface HTMLMicrobitConnectElement extends Components.MicrobitConnect, HTMLStencilElement {}
  var HTMLMicrobitConnectElement: {
    prototype: HTMLMicrobitConnectElement;
    new (): HTMLMicrobitConnectElement;
  };

  interface HTMLElementTagNameMap {
    'microbit-temperature': HTMLMicrobitTemperatureElement
    'microbit-firmware': HTMLMicrobitFirmwareElement
    'microbit-hardware': HTMLMicrobitHardwareElement
    'microbit-manufacturer': HTMLMicrobitManufacturerElement
    'microbit-model': HTMLMicrobitModelElement
    'microbit-name': HTMLMicrobitNameElement
    'microbit-serial': HTMLMicrobitSerialElement
    'microbit-text': HTMLMicrobitTextElement
    'microbit-app': HTMLMicrobitAppElement
    'microbit-connect': HTMLMicrobitConnectElement
  }

  interface ElementTagNameMap {
    'microbit-temperature': HTMLMicrobitTemperatureElement;
    'microbit-firmware': HTMLMicrobitFirmwareElement;
    'microbit-hardware': HTMLMicrobitHardwareElement;
    'microbit-manufacturer': HTMLMicrobitManufacturerElement;
    'microbit-model': HTMLMicrobitModelElement;
    'microbit-name': HTMLMicrobitNameElement;
    'microbit-serial': HTMLMicrobitSerialElement;
    'microbit-text': HTMLMicrobitTextElement;
    'microbit-app': HTMLMicrobitAppElement;
    'microbit-connect': HTMLMicrobitConnectElement;
  }


}
